package com.debitum.assets.port.adapter.watcher.contracts;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Future;


public class DebtCoverageCollector extends Contract {
    private static final String BINARY = "";

    private DebtCoverageCollector(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private DebtCoverageCollector(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<ContractAddedEventResponse> getContractAddedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ContractAdded",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ContractAddedEventResponse> responses = new ArrayList<ContractAddedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ContractAddedEventResponse typedResponse = new ContractAddedEventResponse();
            typedResponse.token = (Utf8String) eventValues.getNonIndexedValues().get(0);
            typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(1);
            typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ContractAddedEventResponse> contractAddedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ContractAdded",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ContractAddedEventResponse>() {
            @Override
            public ContractAddedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ContractAddedEventResponse typedResponse = new ContractAddedEventResponse();
                typedResponse.token = (Utf8String) eventValues.getNonIndexedValues().get(0);
                typedResponse.value = (Uint256) eventValues.getNonIndexedValues().get(1);
                typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public List<UnauthorizedErrorEventResponse> getUnauthorizedErrorEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("UnauthorizedError",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<UnauthorizedErrorEventResponse> responses = new ArrayList<UnauthorizedErrorEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            UnauthorizedErrorEventResponse typedResponse = new UnauthorizedErrorEventResponse();
            typedResponse.hacker = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.message = (Utf8String) eventValues.getNonIndexedValues().get(1);
            typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UnauthorizedErrorEventResponse> unauthorizedErrorEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("UnauthorizedError",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UnauthorizedErrorEventResponse>() {
            @Override
            public UnauthorizedErrorEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                UnauthorizedErrorEventResponse typedResponse = new UnauthorizedErrorEventResponse();
                typedResponse.hacker = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.message = (Utf8String) eventValues.getNonIndexedValues().get(1);
                typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public List<TokenDoesNotExistsErrorEventResponse> getTokenDoesNotExistsErrorEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("TokenDoesNotExistsError",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<TokenDoesNotExistsErrorEventResponse> responses = new ArrayList<TokenDoesNotExistsErrorEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            TokenDoesNotExistsErrorEventResponse typedResponse = new TokenDoesNotExistsErrorEventResponse();
            typedResponse.hacker = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.token = (Utf8String) eventValues.getNonIndexedValues().get(1);
            typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TokenDoesNotExistsErrorEventResponse> tokenDoesNotExistsErrorEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("TokenDoesNotExistsError",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TokenDoesNotExistsErrorEventResponse>() {
            @Override
            public TokenDoesNotExistsErrorEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                TokenDoesNotExistsErrorEventResponse typedResponse = new TokenDoesNotExistsErrorEventResponse();
                typedResponse.hacker = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.token = (Utf8String) eventValues.getNonIndexedValues().get(1);
                typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public List<ContractAlreadyPaidErrorEventResponse> getContractAlreadyPaidErrorEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ContractAlreadyPaidError",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ContractAlreadyPaidErrorEventResponse> responses = new ArrayList<ContractAlreadyPaidErrorEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ContractAlreadyPaidErrorEventResponse typedResponse = new ContractAlreadyPaidErrorEventResponse();
            typedResponse.hacker = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.token = (Utf8String) eventValues.getNonIndexedValues().get(1);
            typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ContractAlreadyPaidErrorEventResponse> contractAlreadyPaidErrorEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ContractAlreadyPaidError",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ContractAlreadyPaidErrorEventResponse>() {
            @Override
            public ContractAlreadyPaidErrorEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ContractAlreadyPaidErrorEventResponse typedResponse = new ContractAlreadyPaidErrorEventResponse();
                typedResponse.hacker = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.token = (Utf8String) eventValues.getNonIndexedValues().get(1);
                typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public List<BalanceIsNotEnoughErrorEventResponse> getBalanceIsNotEnoughErrorEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("BalanceIsNotEnoughError",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<BalanceIsNotEnoughErrorEventResponse> responses = new ArrayList<BalanceIsNotEnoughErrorEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            BalanceIsNotEnoughErrorEventResponse typedResponse = new BalanceIsNotEnoughErrorEventResponse();
            typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<BalanceIsNotEnoughErrorEventResponse> balanceIsNotEnoughErrorEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("BalanceIsNotEnoughError",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, BalanceIsNotEnoughErrorEventResponse>() {
            @Override
            public BalanceIsNotEnoughErrorEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                BalanceIsNotEnoughErrorEventResponse typedResponse = new BalanceIsNotEnoughErrorEventResponse();
                typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<PaymentDataCorruptedErrorEventResponse> getPaymentDataCorruptedErrorEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("PaymentDataCorruptedError",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<PaymentDataCorruptedErrorEventResponse> responses = new ArrayList<PaymentDataCorruptedErrorEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            PaymentDataCorruptedErrorEventResponse typedResponse = new PaymentDataCorruptedErrorEventResponse();
            typedResponse.tokensSize = (Uint256) eventValues.getNonIndexedValues().get(0);
            typedResponse.invoicesSize = (Uint256) eventValues.getNonIndexedValues().get(1);
            typedResponse.payementsSize = (Uint256) eventValues.getNonIndexedValues().get(2);
            typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(3);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<PaymentDataCorruptedErrorEventResponse> paymentDataCorruptedErrorEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("PaymentDataCorruptedError",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, PaymentDataCorruptedErrorEventResponse>() {
            @Override
            public PaymentDataCorruptedErrorEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                PaymentDataCorruptedErrorEventResponse typedResponse = new PaymentDataCorruptedErrorEventResponse();
                typedResponse.tokensSize = (Uint256) eventValues.getNonIndexedValues().get(0);
                typedResponse.invoicesSize = (Uint256) eventValues.getNonIndexedValues().get(1);
                typedResponse.payementsSize = (Uint256) eventValues.getNonIndexedValues().get(2);
                typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(3);
                return typedResponse;
            }
        });
    }

    public List<ContractPaidEventResponse> getContractPaidEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ContractPaid",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ContractPaidEventResponse> responses = new ArrayList<ContractPaidEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ContractPaidEventResponse typedResponse = new ContractPaidEventResponse();
            typedResponse.sender = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.token = (Utf8String) eventValues.getNonIndexedValues().get(1);
            typedResponse.ammount = (Uint256) eventValues.getNonIndexedValues().get(2);
            typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(3);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ContractPaidEventResponse> contractPaidEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ContractPaid",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ContractPaidEventResponse>() {
            @Override
            public ContractPaidEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ContractPaidEventResponse typedResponse = new ContractPaidEventResponse();
                typedResponse.sender = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.token = (Utf8String) eventValues.getNonIndexedValues().get(1);
                typedResponse.ammount = (Uint256) eventValues.getNonIndexedValues().get(2);
                typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(3);
                return typedResponse;
            }
        });
    }

    public List<InterestRateChangedEventResponse> getInterestRateChangedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("InterestRateChanged",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<InterestRateChangedEventResponse> responses = new ArrayList<InterestRateChangedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            InterestRateChangedEventResponse typedResponse = new InterestRateChangedEventResponse();
            typedResponse.token = (Utf8String) eventValues.getNonIndexedValues().get(0);
            typedResponse.newInterestRate = (Uint256) eventValues.getNonIndexedValues().get(1);
            typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<InterestRateChangedEventResponse> interestRateChangedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("InterestRateChanged",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, InterestRateChangedEventResponse>() {
            @Override
            public InterestRateChangedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                InterestRateChangedEventResponse typedResponse = new InterestRateChangedEventResponse();
                typedResponse.token = (Utf8String) eventValues.getNonIndexedValues().get(0);
                typedResponse.newInterestRate = (Uint256) eventValues.getNonIndexedValues().get(1);
                typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public List<ContractAmountNotCorrectErrorEventResponse> getContractAmountNotCorrectErrorEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ContractAmountNotCorrectError",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ContractAmountNotCorrectErrorEventResponse> responses = new ArrayList<ContractAmountNotCorrectErrorEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ContractAmountNotCorrectErrorEventResponse typedResponse = new ContractAmountNotCorrectErrorEventResponse();
            typedResponse.hacker = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.token = (Utf8String) eventValues.getNonIndexedValues().get(1);
            typedResponse.hasToBe = (Uint256) eventValues.getNonIndexedValues().get(2);
            typedResponse.declared = (Uint256) eventValues.getNonIndexedValues().get(3);
            typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(4);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ContractAmountNotCorrectErrorEventResponse> contractAmountNotCorrectErrorEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ContractAmountNotCorrectError",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ContractAmountNotCorrectErrorEventResponse>() {
            @Override
            public ContractAmountNotCorrectErrorEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ContractAmountNotCorrectErrorEventResponse typedResponse = new ContractAmountNotCorrectErrorEventResponse();
                typedResponse.hacker = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.token = (Utf8String) eventValues.getNonIndexedValues().get(1);
                typedResponse.hasToBe = (Uint256) eventValues.getNonIndexedValues().get(2);
                typedResponse.declared = (Uint256) eventValues.getNonIndexedValues().get(3);
                typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(4);
                return typedResponse;
            }
        });
    }

    public List<ContractIsNotPaidErrorEventResponse> getContractIsNotPaidErrorEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ContractIsNotPaidError",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ContractIsNotPaidErrorEventResponse> responses = new ArrayList<ContractIsNotPaidErrorEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ContractIsNotPaidErrorEventResponse typedResponse = new ContractIsNotPaidErrorEventResponse();
            typedResponse.token = (Utf8String) eventValues.getNonIndexedValues().get(0);
            typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ContractIsNotPaidErrorEventResponse> contractIsNotPaidErrorEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ContractIsNotPaidError",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ContractIsNotPaidErrorEventResponse>() {
            @Override
            public ContractIsNotPaidErrorEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ContractIsNotPaidErrorEventResponse typedResponse = new ContractIsNotPaidErrorEventResponse();
                typedResponse.token = (Utf8String) eventValues.getNonIndexedValues().get(0);
                typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public List<InvoiceEntryIsNotPaidErrorEventResponse> getInvoiceEntryIsNotPaidErrorEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("InvoiceEntryIsNotPaidError",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<InvoiceEntryIsNotPaidErrorEventResponse> responses = new ArrayList<InvoiceEntryIsNotPaidErrorEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            InvoiceEntryIsNotPaidErrorEventResponse typedResponse = new InvoiceEntryIsNotPaidErrorEventResponse();
            typedResponse.token = (Utf8String) eventValues.getNonIndexedValues().get(0);
            typedResponse.invoiceId = (Utf8String) eventValues.getNonIndexedValues().get(1);
            typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<InvoiceEntryIsNotPaidErrorEventResponse> invoiceEntryIsNotPaidErrorEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("InvoiceEntryIsNotPaidError",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, InvoiceEntryIsNotPaidErrorEventResponse>() {
            @Override
            public InvoiceEntryIsNotPaidErrorEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                InvoiceEntryIsNotPaidErrorEventResponse typedResponse = new InvoiceEntryIsNotPaidErrorEventResponse();
                typedResponse.token = (Utf8String) eventValues.getNonIndexedValues().get(0);
                typedResponse.invoiceId = (Utf8String) eventValues.getNonIndexedValues().get(1);
                typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public List<InvoiceEntryPaidEventResponse> getInvoiceEntryPaidEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("InvoiceEntryPaid",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<InvoiceEntryPaidEventResponse> responses = new ArrayList<InvoiceEntryPaidEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            InvoiceEntryPaidEventResponse typedResponse = new InvoiceEntryPaidEventResponse();
            typedResponse.invoiceToken = (Utf8String) eventValues.getNonIndexedValues().get(0);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(1);
            typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<InvoiceEntryPaidEventResponse> invoiceEntryPaidEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("InvoiceEntryPaid",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, InvoiceEntryPaidEventResponse>() {
            @Override
            public InvoiceEntryPaidEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                InvoiceEntryPaidEventResponse typedResponse = new InvoiceEntryPaidEventResponse();
                typedResponse.invoiceToken = (Utf8String) eventValues.getNonIndexedValues().get(0);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(1);
                typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public List<InvoiceAlreadyPaidErrorEventResponse> getInvoiceAlreadyPaidErrorEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("InvoiceAlreadyPaidError",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<InvoiceAlreadyPaidErrorEventResponse> responses = new ArrayList<InvoiceAlreadyPaidErrorEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            InvoiceAlreadyPaidErrorEventResponse typedResponse = new InvoiceAlreadyPaidErrorEventResponse();
            typedResponse.invoiceToken = (Utf8String) eventValues.getNonIndexedValues().get(0);
            typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<InvoiceAlreadyPaidErrorEventResponse> invoiceAlreadyPaidErrorEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("InvoiceAlreadyPaidError",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, InvoiceAlreadyPaidErrorEventResponse>() {
            @Override
            public InvoiceAlreadyPaidErrorEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                InvoiceAlreadyPaidErrorEventResponse typedResponse = new InvoiceAlreadyPaidErrorEventResponse();
                typedResponse.invoiceToken = (Utf8String) eventValues.getNonIndexedValues().get(0);
                typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public List<BalanceIsNotEnoughToPayInterestErrorEventResponse> getBalanceIsNotEnoughToPayInterestErrorEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("BalanceIsNotEnoughToPayInterestError",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<BalanceIsNotEnoughToPayInterestErrorEventResponse> responses = new ArrayList<BalanceIsNotEnoughToPayInterestErrorEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            BalanceIsNotEnoughToPayInterestErrorEventResponse typedResponse = new BalanceIsNotEnoughToPayInterestErrorEventResponse();
            typedResponse.token = (Utf8String) eventValues.getNonIndexedValues().get(0);
            typedResponse.balance = (Uint256) eventValues.getNonIndexedValues().get(1);
            typedResponse.interest = (Uint256) eventValues.getNonIndexedValues().get(2);
            typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(3);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<BalanceIsNotEnoughToPayInterestErrorEventResponse> balanceIsNotEnoughToPayInterestErrorEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("BalanceIsNotEnoughToPayInterestError",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, BalanceIsNotEnoughToPayInterestErrorEventResponse>() {
            @Override
            public BalanceIsNotEnoughToPayInterestErrorEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                BalanceIsNotEnoughToPayInterestErrorEventResponse typedResponse = new BalanceIsNotEnoughToPayInterestErrorEventResponse();
                typedResponse.token = (Utf8String) eventValues.getNonIndexedValues().get(0);
                typedResponse.balance = (Uint256) eventValues.getNonIndexedValues().get(1);
                typedResponse.interest = (Uint256) eventValues.getNonIndexedValues().get(2);
                typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(3);
                return typedResponse;
            }
        });
    }

    public List<PaidContractDeleteErrorEventResponse> getPaidContractDeleteErrorEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("PaidContractDeleteError",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<PaidContractDeleteErrorEventResponse> responses = new ArrayList<PaidContractDeleteErrorEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            PaidContractDeleteErrorEventResponse typedResponse = new PaidContractDeleteErrorEventResponse();
            typedResponse.token = (Utf8String) eventValues.getNonIndexedValues().get(0);
            typedResponse.investmentOwner = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<PaidContractDeleteErrorEventResponse> paidContractDeleteErrorEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("PaidContractDeleteError",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, PaidContractDeleteErrorEventResponse>() {
            @Override
            public PaidContractDeleteErrorEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                PaidContractDeleteErrorEventResponse typedResponse = new PaidContractDeleteErrorEventResponse();
                typedResponse.token = (Utf8String) eventValues.getNonIndexedValues().get(0);
                typedResponse.investmentOwner = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public List<ContractDeletedEventResponse> getContractDeletedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ContractDeleted",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ContractDeletedEventResponse> responses = new ArrayList<ContractDeletedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ContractDeletedEventResponse typedResponse = new ContractDeletedEventResponse();
            typedResponse.token = (Utf8String) eventValues.getNonIndexedValues().get(0);
            typedResponse.investmentOwner = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ContractDeletedEventResponse> contractDeletedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ContractDeleted",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ContractDeletedEventResponse>() {
            @Override
            public ContractDeletedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ContractDeletedEventResponse typedResponse = new ContractDeletedEventResponse();
                typedResponse.token = (Utf8String) eventValues.getNonIndexedValues().get(0);
                typedResponse.investmentOwner = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse.createdOn = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Future<Uint256> getBalance() {
        Function function = new Function("getBalance",
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getInvestmentMetaInfo(Utf8String token) {
        Function function = new Function("getInvestmentMetaInfo",
                Arrays.<Type>asList(token),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> kill() {
        Function function = new Function("kill", Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> payForInvoices(Utf8String tokens, Utf8String invoiceEntries, DynamicArray<Uint256> pays) {
        Function function = new Function("payForInvoices", Arrays.<Type>asList(tokens, invoiceEntries, pays), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> AddEth(BigInteger weiValue) {
        Function function = new Function("AddEth", Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function, weiValue);
    }

    public Future<TransactionReceipt> sendCoin(Utf8String contractToken, Address coinSender, BigInteger weiValue) {
        Function function = new Function("sendCoin", Arrays.<Type>asList(contractToken, coinSender), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function, weiValue);
    }

    public Future<TransactionReceipt> invoicePaymentPaidAtInfo(Utf8String invoiceToken) {
        Function function = new Function("invoicePaymentPaidAtInfo", Arrays.<Type>asList(invoiceToken), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> invoicePaymentAmountInfo(Utf8String invoiceToken) {
        Function function = new Function("invoicePaymentAmountInfo", Arrays.<Type>asList(invoiceToken), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> addContract(Utf8String token, Utf8String investmentMeta, Uint256 value) {
        Function function = new Function("addContract", Arrays.<Type>asList(token, investmentMeta, value), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> deleteContract(Utf8String tokens) {
        Function function = new Function("deleteContract", Arrays.<Type>asList(tokens), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public static Future<DebtCoverageCollector> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(DebtCoverageCollector.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Future<DebtCoverageCollector> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(DebtCoverageCollector.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static DebtCoverageCollector load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DebtCoverageCollector(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static DebtCoverageCollector load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DebtCoverageCollector(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class ContractAddedEventResponse {
        public Utf8String token;

        public Uint256 value;

        public Uint256 createdOn;
    }

    public static class UnauthorizedErrorEventResponse {
        public Address hacker;

        public Utf8String message;

        public Uint256 createdOn;
    }

    public static class TokenDoesNotExistsErrorEventResponse {
        public Address hacker;

        public Utf8String token;

        public Uint256 createdOn;
    }

    public static class ContractAlreadyPaidErrorEventResponse {
        public Address hacker;

        public Utf8String token;

        public Uint256 createdOn;
    }

    public static class BalanceIsNotEnoughErrorEventResponse {
        public Uint256 createdOn;
    }

    public static class PaymentDataCorruptedErrorEventResponse {
        public Uint256 tokensSize;

        public Uint256 invoicesSize;

        public Uint256 payementsSize;

        public Uint256 createdOn;
    }

    public static class ContractPaidEventResponse {
        public Address sender;

        public Utf8String token;

        public Uint256 ammount;

        public Uint256 createdOn;
    }

    public static class InterestRateChangedEventResponse {
        public Utf8String token;

        public Uint256 newInterestRate;

        public Uint256 createdOn;
    }

    public static class ContractAmountNotCorrectErrorEventResponse {
        public Address hacker;

        public Utf8String token;

        public Uint256 hasToBe;

        public Uint256 declared;

        public Uint256 createdOn;
    }

    public static class ContractIsNotPaidErrorEventResponse {
        public Utf8String token;

        public Uint256 createdOn;
    }

    public static class InvoiceEntryIsNotPaidErrorEventResponse {
        public Utf8String token;

        public Utf8String invoiceId;

        public Uint256 createdOn;
    }

    public static class InvoiceEntryPaidEventResponse {
        public Utf8String invoiceToken;

        public Uint256 amount;

        public Uint256 createdOn;
    }

    public static class InvoiceAlreadyPaidErrorEventResponse {
        public Utf8String invoiceToken;

        public Uint256 createdOn;
    }

    public static class BalanceIsNotEnoughToPayInterestErrorEventResponse {
        public Utf8String token;

        public Uint256 balance;

        public Uint256 interest;

        public Uint256 createdOn;
    }

    public static class PaidContractDeleteErrorEventResponse {
        public Utf8String token;

        public Address investmentOwner;

        public Uint256 createdOn;
    }

    public static class ContractDeletedEventResponse {
        public Utf8String token;

        public Address investmentOwner;

        public Uint256 createdOn;
    }
}
